/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.97
 * Generated at: 2025-01-01 11:13:26 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.web.domain.Shops;
import com.web.domain.User;
import java.util.List;

public final class Administer_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(4);
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("com.web.domain.User");
    _jspx_imports_classes.add("com.web.domain.Shops");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP 只允许 GET、POST 或 HEAD。Jasper 还允许 OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"en\">\r\n");
      out.write("<head>\r\n");
      out.write("    <meta charset=\"UTF-8\">\r\n");
      out.write("    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n");
      out.write("    <title>管理员界面</title>\r\n");
      out.write("    <!-- 引入外部 CSS 文件 -->\r\n");
      out.write("    <link rel=\"stylesheet\" type=\"text/css\" href=\"");
      out.print( request.getContextPath() );
      out.write("/css/Administer.css\">\r\n");
      out.write("</head>\r\n");
      out.write("\r\n");
      out.write("<body>\r\n");
      out.write("<div class=\"container\">\r\n");
      out.write("    <h1>管理员界面</h1>\r\n");
      out.write("\r\n");
      out.write("    <!-- User Management Section -->\r\n");
      out.write("    <h2>用户管理</h2>\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    <table>\r\n");
      out.write("        <thead>\r\n");
      out.write("        <tr>\r\n");
      out.write("            <th>ID</th>\r\n");
      out.write("            <th>用户名</th>\r\n");
      out.write("            <th>电话</th>\r\n");
      out.write("            <th>密码</th>\r\n");
      out.write("            <th>角色</th>\r\n");
      out.write("            <th>创建时间</th>\r\n");
      out.write("            <th>更新时间</th>\r\n");
      out.write("            <th>操作</th>\r\n");
      out.write("        </tr>\r\n");
      out.write("        </thead>\r\n");
      out.write("        <tbody>\r\n");
      out.write("        ");

            List<User> users = (List<User>) request.getAttribute("users");
            if (users != null && !users.isEmpty()) {
                for (User user : users) {
        
      out.write("\r\n");
      out.write("        <tr>\r\n");
      out.write("            <td>");
      out.print( user.getId() );
      out.write("</td>\r\n");
      out.write("            <td>");
      out.print( user.getName() );
      out.write("</td>\r\n");
      out.write("            <td>");
      out.print( user.getPhone() );
      out.write("</td>\r\n");
      out.write("            <td>");
      out.print( user.getPassword() );
      out.write("</td>\r\n");
      out.write("            <td>");
      out.print( user.getRole() );
      out.write("</td>\r\n");
      out.write("            <td>");
      out.print( user.getCreated_at() );
      out.write("</td>\r\n");
      out.write("            <td>");
      out.print( user.getUpdated_at() );
      out.write("</td>\r\n");
      out.write("            <td>\r\n");
      out.write("                <div class=\"button-group\">\r\n");
      out.write("                    <form action=\"user\" method=\"get\" style=\"display: inline;\">\r\n");
      out.write("                        <input type=\"hidden\" name=\"action\" value=\"delete\">\r\n");
      out.write("                        <input type=\"hidden\" name=\"id\" value=\"");
      out.print( user.getId() );
      out.write("\">\r\n");
      out.write("                        <button type=\"submit\" class=\"delete-button action-button\">删除</button>\r\n");
      out.write("                    </form>\r\n");
      out.write("                    <a href=\"");
      out.print( request.getContextPath() );
      out.write("/jsp/editUser.jsp?id=");
      out.print( user.getId() );
      out.write("&name=");
      out.print( user.getName() );
      out.write("&phone=");
      out.print( user.getPhone() );
      out.write("&password=");
      out.print( user.getPassword() );
      out.write("\" class=\"edit-button action-button\">修改</a>\r\n");
      out.write("                </div>\r\n");
      out.write("            </td>\r\n");
      out.write("        </tr>\r\n");
      out.write("        ");

            }
        } else {
        
      out.write("\r\n");
      out.write("        <tr>\r\n");
      out.write("            <td colspan=\"8\">没有用户数据。</td>\r\n");
      out.write("        </tr>\r\n");
      out.write("        ");

            }
        
      out.write("\r\n");
      out.write("        </tbody>\r\n");
      out.write("    </table>\r\n");
      out.write("\r\n");
      out.write("    <!-- Shop Management Section -->\r\n");
      out.write("    <h2>商铺管理</h2>\r\n");
      out.write("    <table>\r\n");
      out.write("        <thead>\r\n");
      out.write("        <tr>\r\n");
      out.write("            <th>ID</th>\r\n");
      out.write("            <th>商铺名称</th>\r\n");
      out.write("            <th>描述</th>\r\n");
      out.write("            <th>用户ID</th>\r\n");
      out.write("            <th>创建时间</th>\r\n");
      out.write("            <th>更新时间</th>\r\n");
      out.write("            <th>操作</th>\r\n");
      out.write("        </tr>\r\n");
      out.write("        </thead>\r\n");
      out.write("        <tbody>\r\n");
      out.write("        ");

            List<Shops> shops = (List<Shops>) request.getAttribute("shops");
            if (shops != null && !shops.isEmpty()) {
                for (Shops shop : shops) {
        
      out.write("\r\n");
      out.write("        <tr>\r\n");
      out.write("            <td>");
      out.print( shop.getId() );
      out.write("</td>\r\n");
      out.write("            <td>");
      out.print( shop.getName() );
      out.write("</td>\r\n");
      out.write("            <td>");
      out.print( (shop.getDescription() != null && !shop.getDescription().isEmpty()) ? shop.getDescription() : "无" );
      out.write("</td>\r\n");
      out.write("            <td>");
      out.print( shop.getUser_id() );
      out.write("</td>\r\n");
      out.write("            <td>");
      out.print( shop.getCreated_at() );
      out.write("</td>\r\n");
      out.write("            <td>");
      out.print( shop.getUpdated_at() );
      out.write("</td>\r\n");
      out.write("            <td>\r\n");
      out.write("                <div class=\"button-group\">\r\n");
      out.write("                    <form action=\"shop\" method=\"get\" style=\"display: inline;\">\r\n");
      out.write("                        <input type=\"hidden\" name=\"action\" value=\"delete\">\r\n");
      out.write("                        <input type=\"hidden\" name=\"id\" value=\"");
      out.print( shop.getId() );
      out.write("\">\r\n");
      out.write("                        <button type=\"submit\" class=\"delete-button action-button\">删除</button>\r\n");
      out.write("                    </form>\r\n");
      out.write("                    <a href=\"");
      out.print( request.getContextPath() );
      out.write("/jsp/editShop.jsp?id=");
      out.print( shop.getId() );
      out.write("&name=");
      out.print( shop.getName() );
      out.write("&description=");
      out.print( shop.getDescription() );
      out.write("&user_id=");
      out.print( shop.getUser_id() );
      out.write("\" class=\"edit-button action-button\">修改</a>\r\n");
      out.write("                </div>\r\n");
      out.write("            </td>\r\n");
      out.write("        </tr>\r\n");
      out.write("        ");

            }
        } else {
        
      out.write("\r\n");
      out.write("        <tr>\r\n");
      out.write("            <td colspan=\"7\">没有商铺数据。</td>\r\n");
      out.write("        </tr>\r\n");
      out.write("        ");

            }
        
      out.write("\r\n");
      out.write("        </tbody>\r\n");
      out.write("    </table>\r\n");
      out.write("\r\n");
      out.write("</div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
